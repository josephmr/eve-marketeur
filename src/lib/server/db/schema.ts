import {
  sqliteTable,
  check,
  integer,
  numeric,
  real,
  index,
  primaryKey,
  text,
  uniqueIndex,
} from "drizzle-orm/sqlite-core";
import { sql } from "drizzle-orm";

export const crpNpcCorporations = sqliteTable(
  "crpNPCCorporations",
  {
    corporationId: integer().primaryKey().notNull(),
    size: numeric(),
    extent: numeric(),
    solarSystemId: integer(),
    investorId1: integer(),
    investorShares1: integer(),
    investorId2: integer(),
    investorShares2: integer(),
    investorId3: integer(),
    investorShares3: integer(),
    investorId4: integer(),
    investorShares4: integer(),
    friendId: integer(),
    enemyId: integer(),
    publicShares: integer(),
    initialPrice: integer(),
    minSecurity: real(),
    scattered: numeric(),
    fringe: integer(),
    corridor: integer(),
    hub: integer(),
    border: integer(),
    factionId: integer(),
    sizeFactor: real(),
    stationCount: integer(),
    stationSystemCount: integer(),
    description: text({ length: 4000 }),
    iconId: integer(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const staOperations = sqliteTable(
  "staOperations",
  {
    activityId: integer(),
    operationId: integer().primaryKey().notNull(),
    operationName: text({ length: 100 }),
    description: text({ length: 1000 }),
    fringe: integer(),
    corridor: integer(),
    hub: integer(),
    border: integer(),
    ratio: integer(),
    caldariStationTypeId: integer(),
    minmatarStationTypeId: integer(),
    amarrStationTypeId: integer(),
    gallenteStationTypeId: integer(),
    joveStationTypeId: integer(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const invVolumes = sqliteTable(
  "invVolumes",
  {
    typeId: integer().primaryKey().notNull(),
    volume: integer(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const industryActivityProbabilities = sqliteTable(
  "industryActivityProbabilities",
  {
    typeId: integer(),
    activityId: integer(),
    productTypeId: integer(),
    probability: numeric(),
  },
  (table) => [
    index("ix_industryActivityProbabilities_productTypeID").on(
      table.productTypeId
    ),
    index("ix_industryActivityProbabilities_typeID").on(table.typeId),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const ramAssemblyLineStations = sqliteTable(
  "ramAssemblyLineStations",
  {
    stationId: integer().notNull(),
    assemblyLineTypeId: integer().notNull(),
    quantity: integer(),
    stationTypeId: integer(),
    ownerId: integer(),
    solarSystemId: integer(),
    regionId: integer(),
  },
  (table) => [
    index("ix_ramAssemblyLineStations_solarSystemID").on(table.solarSystemId),
    index("ix_ramAssemblyLineStations_ownerID").on(table.ownerId),
    index("ix_ramAssemblyLineStations_regionID").on(table.regionId),
    primaryKey({
      columns: [table.stationId, table.assemblyLineTypeId],
      name: "ramAssemblyLineStations_stationID_assemblyLineTypeID_pk",
    }),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const ramAssemblyLineTypes = sqliteTable(
  "ramAssemblyLineTypes",
  {
    assemblyLineTypeId: integer().primaryKey().notNull(),
    assemblyLineTypeName: text({ length: 100 }),
    description: text({ length: 1000 }),
    baseTimeMultiplier: real(),
    baseMaterialMultiplier: real(),
    baseCostMultiplier: real(),
    volume: real(),
    activityId: integer(),
    minCostPerHour: real(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const invMarketGroups = sqliteTable(
  "invMarketGroups",
  {
    marketGroupId: integer().primaryKey().notNull(),
    parentGroupId: integer(),
    marketGroupName: text({ length: 100 }),
    description: text({ length: 3000 }),
    iconId: integer(),
    hasTypes: numeric(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const trnTranslationLanguages = sqliteTable(
  "trnTranslationLanguages",
  {
    numericLanguageId: integer().primaryKey().notNull(),
    languageId: text({ length: 50 }),
    languageName: text({ length: 200 }),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const chrAttributes = sqliteTable(
  "chrAttributes",
  {
    attributeId: integer().primaryKey().notNull(),
    attributeName: text({ length: 100 }),
    description: text({ length: 1000 }),
    iconId: integer(),
    shortDescription: text({ length: 500 }),
    notes: text({ length: 500 }),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const industryActivityProducts = sqliteTable(
  "industryActivityProducts",
  {
    typeId: integer(),
    activityId: integer(),
    productTypeId: integer(),
    quantity: integer(),
  },
  (table) => [
    index("ix_industryActivityProducts_productTypeID").on(table.productTypeId),
    index("ix_industryActivityProducts_typeID").on(table.typeId),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const planetSchematicsPinMap = sqliteTable(
  "planetSchematicsPinMap",
  {
    schematicId: integer().notNull(),
    pinTypeId: integer().notNull(),
  },
  (table) => [
    primaryKey({
      columns: [table.schematicId, table.pinTypeId],
      name: "planetSchematicsPinMap_schematicID_pinTypeID_pk",
    }),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const mapRegionJumps = sqliteTable(
  "mapRegionJumps",
  {
    fromRegionId: integer().notNull(),
    toRegionId: integer().notNull(),
  },
  (table) => [
    primaryKey({
      columns: [table.fromRegionId, table.toRegionId],
      name: "mapRegionJumps_fromRegionID_toRegionID_pk",
    }),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const skinMaterials = sqliteTable(
  "skinMaterials",
  {
    skinMaterialId: integer().primaryKey().notNull(),
    displayNameId: integer(),
    materialSetId: integer(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const mapSolarSystems = sqliteTable(
  "mapSolarSystems",
  {
    regionId: integer(),
    constellationId: integer(),
    solarSystemId: integer().primaryKey().notNull(),
    solarSystemName: text({ length: 100 }),
    x: real(),
    y: real(),
    z: real(),
    xMin: real(),
    xMax: real(),
    yMin: real(),
    yMax: real(),
    zMin: real(),
    zMax: real(),
    luminosity: real(),
    border: numeric(),
    fringe: numeric(),
    corridor: numeric(),
    hub: numeric(),
    international: numeric(),
    regional: numeric(),
    constellation: numeric(),
    security: real(),
    factionId: integer(),
    radius: real(),
    sunTypeId: integer(),
    securityClass: text({ length: 2 }),
  },
  (table) => [
    index("ix_mapSolarSystems_constellationID").on(table.constellationId),
    index("ix_mapSolarSystems_regionID").on(table.regionId),
    index("ix_mapSolarSystems_security").on(table.security),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const trnTranslationColumns = sqliteTable(
  "trnTranslationColumns",
  {
    tcGroupId: integer(),
    tcId: integer().primaryKey().notNull(),
    tableName: text({ length: 256 }).notNull(),
    columnName: text({ length: 128 }).notNull(),
    masterId: text({ length: 128 }),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const eveIcons = sqliteTable(
  "eveIcons",
  {
    iconId: integer().primaryKey().notNull(),
    iconFile: text({ length: 500 }),
    description: text(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const mapRegions = sqliteTable(
  "mapRegions",
  {
    regionId: integer().primaryKey().notNull(),
    regionName: text({ length: 100 }),
    x: real(),
    y: real(),
    z: real(),
    xMin: real(),
    xMax: real(),
    yMin: real(),
    yMax: real(),
    zMin: real(),
    zMax: real(),
    factionId: integer(),
    nebula: integer(),
    radius: real(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const industryActivityRaces = sqliteTable(
  "industryActivityRaces",
  {
    typeId: integer(),
    activityId: integer(),
    productTypeId: integer(),
    raceId: integer(),
  },
  (table) => [
    index("ix_industryActivityRaces_productTypeID").on(table.productTypeId),
    index("ix_industryActivityRaces_typeID").on(table.typeId),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const skins = sqliteTable(
  "skins",
  {
    skinId: integer().primaryKey().notNull(),
    internalName: text({ length: 70 }),
    skinMaterialId: integer(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const invTypeReactions = sqliteTable(
  "invTypeReactions",
  {
    reactionTypeId: integer().notNull(),
    input: numeric().notNull(),
    typeId: integer().notNull(),
    quantity: integer(),
  },
  (table) => [
    primaryKey({
      columns: [table.reactionTypeId, table.input, table.typeId],
      name: "invTypeReactions_reactionTypeID_input_typeID_pk",
    }),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const eveUnits = sqliteTable(
  "eveUnits",
  {
    unitId: integer().primaryKey().notNull(),
    unitName: text({ length: 100 }),
    displayName: text({ length: 50 }),
    description: text({ length: 1000 }),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const agtAgentTypes = sqliteTable(
  "agtAgentTypes",
  {
    agentTypeId: integer().primaryKey().notNull(),
    agentType: text({ length: 50 }),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const planetSchematicsTypeMap = sqliteTable(
  "planetSchematicsTypeMap",
  {
    schematicId: integer().notNull(),
    typeId: integer().notNull(),
    quantity: integer(),
    isInput: numeric(),
  },
  (table) => [
    primaryKey({
      columns: [table.schematicId, table.typeId],
      name: "planetSchematicsTypeMap_schematicID_typeID_pk",
    }),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const ramInstallationTypeContents = sqliteTable(
  "ramInstallationTypeContents",
  {
    installationTypeId: integer().notNull(),
    assemblyLineTypeId: integer().notNull(),
    quantity: integer(),
  },
  (table) => [
    primaryKey({
      columns: [table.installationTypeId, table.assemblyLineTypeId],
      name: "ramInstallationTypeContents_installationTypeID_assemblyLineTypeID_pk",
    }),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const invUniqueNames = sqliteTable(
  "invUniqueNames",
  {
    itemId: integer().primaryKey().notNull(),
    itemName: text({ length: 200 }).notNull(),
    groupId: integer(),
  },
  (table) => [
    index("invUniqueNames_IX_GroupName").on(table.groupId, table.itemName),
    uniqueIndex("ix_invUniqueNames_itemName").on(table.itemName),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const chrAncestries = sqliteTable(
  "chrAncestries",
  {
    ancestryId: integer().primaryKey().notNull(),
    ancestryName: text({ length: 100 }),
    bloodlineId: integer(),
    description: text({ length: 1000 }),
    perception: integer(),
    willpower: integer(),
    charisma: integer(),
    memory: integer(),
    intelligence: integer(),
    iconId: integer(),
    shortDescription: text({ length: 500 }),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const mapLocationScenes = sqliteTable(
  "mapLocationScenes",
  {
    locationId: integer().primaryKey().notNull(),
    graphicId: integer(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const invTypes = sqliteTable(
  "invTypes",
  {
    typeId: integer().primaryKey().notNull(),
    groupId: integer(),
    typeName: text({ length: 100 }),
    description: text(),
    mass: real(),
    volume: real(),
    capacity: real(),
    portionSize: integer(),
    raceId: integer(),
    basePrice: numeric(),
    published: numeric(),
    marketGroupId: integer(),
    iconId: integer(),
    soundId: integer(),
    graphicId: integer(),
  },
  (table) => [
    index("ix_invTypes_groupID").on(table.groupId),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const industryActivity = sqliteTable(
  "industryActivity",
  {
    typeId: integer().notNull(),
    activityId: integer().notNull(),
    time: integer(),
  },
  (table) => [
    index("ix_industryActivity_activityID").on(table.activityId),
    primaryKey({
      columns: [table.typeId, table.activityId],
      name: "industryActivity_typeID_activityID_pk",
    }),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const invControlTowerResources = sqliteTable(
  "invControlTowerResources",
  {
    controlTowerTypeId: integer().notNull(),
    resourceTypeId: integer().notNull(),
    purpose: integer(),
    quantity: integer(),
    minSecurityLevel: real(),
    factionId: integer(),
  },
  (table) => [
    primaryKey({
      columns: [table.controlTowerTypeId, table.resourceTypeId],
      name: "invControlTowerResources_controlTowerTypeID_resourceTypeID_pk",
    }),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const mapJumps = sqliteTable(
  "mapJumps",
  {
    stargateId: integer().primaryKey().notNull(),
    destinationId: integer(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const certCerts = sqliteTable(
  "certCerts",
  {
    certId: integer().primaryKey().notNull(),
    description: text(),
    groupId: integer(),
    name: text({ length: 255 }),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const industryBlueprints = sqliteTable(
  "industryBlueprints",
  {
    typeId: integer().primaryKey().notNull(),
    maxProductionLimit: integer(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const invTypeMaterials = sqliteTable(
  "invTypeMaterials",
  {
    typeId: integer().notNull(),
    materialTypeId: integer().notNull(),
    quantity: integer().notNull(),
  },
  (table) => [
    primaryKey({
      columns: [table.typeId, table.materialTypeId],
      name: "invTypeMaterials_typeID_materialTypeID_pk",
    }),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const ramAssemblyLineTypeDetailPerGroup = sqliteTable(
  "ramAssemblyLineTypeDetailPerGroup",
  {
    assemblyLineTypeId: integer().notNull(),
    groupId: integer().notNull(),
    timeMultiplier: real(),
    materialMultiplier: real(),
    costMultiplier: real(),
  },
  (table) => [
    primaryKey({
      columns: [table.assemblyLineTypeId, table.groupId],
      name: "ramAssemblyLineTypeDetailPerGroup_assemblyLineTypeID_groupID_pk",
    }),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const trnTranslations = sqliteTable(
  "trnTranslations",
  {
    tcId: integer().notNull(),
    keyId: integer().notNull(),
    languageId: text({ length: 50 }).notNull(),
    text: text().notNull(),
  },
  (table) => [
    primaryKey({
      columns: [table.tcId, table.keyId, table.languageId],
      name: "trnTranslations_tcID_keyID_languageID_pk",
    }),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const dgmAttributeTypes = sqliteTable(
  "dgmAttributeTypes",
  {
    attributeId: integer().primaryKey().notNull(),
    attributeName: text({ length: 100 }),
    description: text({ length: 1000 }),
    iconId: integer(),
    defaultValue: real(),
    published: numeric(),
    displayName: text({ length: 150 }),
    unitId: integer(),
    stackable: numeric(),
    highIsGood: numeric(),
    categoryId: integer(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const agtResearchAgents = sqliteTable(
  "agtResearchAgents",
  {
    agentId: integer().notNull(),
    typeId: integer().notNull(),
  },
  (table) => [
    index("ix_agtResearchAgents_typeID").on(table.typeId),
    primaryKey({
      columns: [table.agentId, table.typeId],
      name: "agtResearchAgents_agentID_typeID_pk",
    }),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const mapSolarSystemJumps = sqliteTable(
  "mapSolarSystemJumps",
  {
    fromRegionId: integer(),
    fromConstellationId: integer(),
    fromSolarSystemId: integer().notNull(),
    toSolarSystemId: integer().notNull(),
    toConstellationId: integer(),
    toRegionId: integer(),
  },
  (table) => [
    primaryKey({
      columns: [table.fromSolarSystemId, table.toSolarSystemId],
      name: "mapSolarSystemJumps_fromSolarSystemID_toSolarSystemID_pk",
    }),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const mapCelestialStatistics = sqliteTable(
  "mapCelestialStatistics",
  {
    celestialId: integer().primaryKey().notNull(),
    temperature: real(),
    spectralClass: text({ length: 10 }),
    luminosity: real(),
    age: real(),
    life: real(),
    orbitRadius: real(),
    eccentricity: real(),
    massDust: real(),
    massGas: real(),
    fragmented: numeric(),
    density: real(),
    surfaceGravity: real(),
    escapeVelocity: real(),
    orbitPeriod: real(),
    rotationRate: real(),
    locked: numeric(),
    pressure: real(),
    radius: real(),
    mass: integer(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const mapConstellationJumps = sqliteTable(
  "mapConstellationJumps",
  {
    fromRegionId: integer(),
    fromConstellationId: integer().notNull(),
    toConstellationId: integer().notNull(),
    toRegionId: integer(),
  },
  (table) => [
    primaryKey({
      columns: [table.fromConstellationId, table.toConstellationId],
      name: "mapConstellationJumps_fromConstellationID_toConstellationID_pk",
    }),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const mapCelestialGraphics = sqliteTable(
  "mapCelestialGraphics",
  {
    celestialId: integer().primaryKey().notNull(),
    heightMap1: integer(),
    heightMap2: integer(),
    shaderPreset: integer(),
    population: numeric(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const staServices = sqliteTable(
  "staServices",
  {
    serviceId: integer().primaryKey().notNull(),
    serviceName: text({ length: 100 }),
    description: text({ length: 1000 }),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const warCombatZoneSystems = sqliteTable(
  "warCombatZoneSystems",
  {
    solarSystemId: integer().primaryKey().notNull(),
    combatZoneId: integer(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const industryActivityMaterials = sqliteTable(
  "industryActivityMaterials",
  {
    typeId: integer(),
    activityId: integer(),
    materialTypeId: integer(),
    quantity: integer(),
  },
  (table) => [
    index("industryActivityMaterials_idx1").on(table.typeId, table.activityId),
    index("ix_industryActivityMaterials_typeID").on(table.typeId),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const mapLandmarks = sqliteTable(
  "mapLandmarks",
  {
    landmarkId: integer().primaryKey().notNull(),
    landmarkName: text({ length: 100 }),
    description: text(),
    locationId: integer(),
    x: real(),
    y: real(),
    z: real(),
    iconId: integer(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const invFlags = sqliteTable(
  "invFlags",
  {
    flagId: integer().primaryKey().notNull(),
    flagName: text({ length: 200 }),
    flagText: text({ length: 100 }),
    orderId: integer(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const invContrabandTypes = sqliteTable(
  "invContrabandTypes",
  {
    factionId: integer().notNull(),
    typeId: integer().notNull(),
    standingLoss: real(),
    confiscateMinSec: real(),
    fineByValue: real(),
    attackMinSec: real(),
  },
  (table) => [
    index("ix_invContrabandTypes_typeID").on(table.typeId),
    primaryKey({
      columns: [table.factionId, table.typeId],
      name: "invContrabandTypes_factionID_typeID_pk",
    }),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const invControlTowerResourcePurposes = sqliteTable(
  "invControlTowerResourcePurposes",
  {
    purpose: integer().primaryKey().notNull(),
    purposeText: text({ length: 100 }),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const staStationTypes = sqliteTable(
  "staStationTypes",
  {
    stationTypeId: integer().primaryKey().notNull(),
    dockEntryX: real(),
    dockEntryY: real(),
    dockEntryZ: real(),
    dockOrientationX: real(),
    dockOrientationY: real(),
    dockOrientationZ: real(),
    operationId: integer(),
    officeSlots: integer(),
    reprocessingEfficiency: real(),
    conquerable: numeric(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const invTraits = sqliteTable(
  "invTraits",
  {
    traitId: integer().primaryKey().notNull(),
    typeId: integer(),
    skillId: integer(),
    bonus: real(),
    bonusText: text(),
    unitId: integer(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const invPositions = sqliteTable(
  "invPositions",
  {
    itemId: integer().primaryKey().notNull(),
    x: real().notNull(),
    y: real().notNull(),
    z: real().notNull(),
    yaw: real(),
    pitch: real(),
    roll: real(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const certSkills = sqliteTable(
  "certSkills",
  {
    certId: integer(),
    skillId: integer(),
    certLevelInt: integer(),
    skillLevel: integer(),
    certLevelText: text({ length: 8 }),
  },
  (table) => [
    index("ix_certSkills_skillID").on(table.skillId),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const skinLicense = sqliteTable(
  "skinLicense",
  {
    licenseTypeId: integer().primaryKey().notNull(),
    duration: integer(),
    skinId: integer(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const dgmTypeAttributes = sqliteTable(
  "dgmTypeAttributes",
  {
    typeId: integer().notNull(),
    attributeId: integer().notNull(),
    valueInt: integer(),
    valueFloat: real(),
  },
  (table) => [
    index("ix_dgmTypeAttributes_attributeID").on(table.attributeId),
    primaryKey({
      columns: [table.typeId, table.attributeId],
      name: "dgmTypeAttributes_typeID_attributeID_pk",
    }),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const mapConstellations = sqliteTable(
  "mapConstellations",
  {
    regionId: integer(),
    constellationId: integer().primaryKey().notNull(),
    constellationName: text({ length: 100 }),
    x: real(),
    y: real(),
    z: real(),
    xMin: real(),
    xMax: real(),
    yMin: real(),
    yMax: real(),
    zMin: real(),
    zMax: real(),
    factionId: integer(),
    radius: real(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const crpNpcCorporationDivisions = sqliteTable(
  "crpNPCCorporationDivisions",
  {
    corporationId: integer().notNull(),
    divisionId: integer().notNull(),
    size: integer(),
  },
  (table) => [
    primaryKey({
      columns: [table.corporationId, table.divisionId],
      name: "crpNPCCorporationDivisions_corporationID_divisionID_pk",
    }),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const dgmAttributeCategories = sqliteTable(
  "dgmAttributeCategories",
  {
    categoryId: integer().primaryKey().notNull(),
    categoryName: text({ length: 50 }),
    categoryDescription: text({ length: 200 }),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const translationTables = sqliteTable(
  "translationTables",
  {
    sourceTable: text({ length: 200 }).notNull(),
    destinationTable: text({ length: 200 }),
    translatedKey: text({ length: 200 }).notNull(),
    tcGroupId: integer(),
    tcId: integer(),
  },
  (table) => [
    primaryKey({
      columns: [table.sourceTable, table.translatedKey],
      name: "translationTables_sourceTable_translatedKey_pk",
    }),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const planetSchematics = sqliteTable(
  "planetSchematics",
  {
    schematicId: integer().primaryKey().notNull(),
    schematicName: text({ length: 255 }),
    cycleTime: integer(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const invMetaTypes = sqliteTable(
  "invMetaTypes",
  {
    typeId: integer().primaryKey().notNull(),
    parentTypeId: integer(),
    metaGroupId: integer(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const certMasteries = sqliteTable(
  "certMasteries",
  {
    typeId: integer(),
    masteryLevel: integer(),
    certId: integer(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const crpNpcCorporationResearchFields = sqliteTable(
  "crpNPCCorporationResearchFields",
  {
    skillId: integer().notNull(),
    corporationId: integer().notNull(),
  },
  (table) => [
    primaryKey({
      columns: [table.skillId, table.corporationId],
      name: "crpNPCCorporationResearchFields_skillID_corporationID_pk",
    }),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const crpNpcDivisions = sqliteTable(
  "crpNPCDivisions",
  {
    divisionId: integer().primaryKey().notNull(),
    divisionName: text({ length: 100 }),
    description: text({ length: 1000 }),
    leaderType: text({ length: 100 }),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const dgmTypeEffects = sqliteTable(
  "dgmTypeEffects",
  {
    typeId: integer().notNull(),
    effectId: integer().notNull(),
    isDefault: numeric(),
  },
  (table) => [
    primaryKey({
      columns: [table.typeId, table.effectId],
      name: "dgmTypeEffects_typeID_effectID_pk",
    }),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const invNames = sqliteTable(
  "invNames",
  {
    itemId: integer().primaryKey().notNull(),
    itemName: text({ length: 200 }).notNull(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const mapDenormalize = sqliteTable(
  "mapDenormalize",
  {
    itemId: integer().primaryKey().notNull(),
    typeId: integer(),
    groupId: integer(),
    solarSystemId: integer(),
    constellationId: integer(),
    regionId: integer(),
    orbitId: integer(),
    x: real(),
    y: real(),
    z: real(),
    radius: real(),
    itemName: text({ length: 100 }),
    security: real(),
    celestialIndex: integer(),
    orbitIndex: integer(),
  },
  (table) => [
    index("mapDenormalize_IX_groupConstellation").on(
      table.groupId,
      table.constellationId
    ),
    index("ix_mapDenormalize_orbitID").on(table.orbitId),
    index("ix_mapDenormalize_constellationID").on(table.constellationId),
    index("ix_mapDenormalize_solarSystemID").on(table.solarSystemId),
    index("ix_mapDenormalize_typeID").on(table.typeId),
    index("ix_mapDenormalize_regionID").on(table.regionId),
    index("mapDenormalize_IX_groupSystem").on(
      table.groupId,
      table.solarSystemId
    ),
    index("mapDenormalize_IX_groupRegion").on(table.groupId, table.regionId),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const chrRaces = sqliteTable(
  "chrRaces",
  {
    raceId: integer().primaryKey().notNull(),
    raceName: text({ length: 100 }),
    description: text({ length: 1000 }),
    iconId: integer(),
    shortDescription: text({ length: 500 }),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const agtAgentsInSpace = sqliteTable(
  "agtAgentsInSpace",
  {
    agentId: integer().primaryKey().notNull(),
    dungeonId: integer(),
    solarSystemId: integer(),
    spawnPointId: integer(),
    typeId: integer(),
  },
  (table) => [
    index("ix_agtAgentsInSpace_solarSystemID").on(table.solarSystemId),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const crpActivities = sqliteTable(
  "crpActivities",
  {
    activityId: integer().primaryKey().notNull(),
    activityName: text({ length: 100 }),
    description: text({ length: 1000 }),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const chrFactions = sqliteTable(
  "chrFactions",
  {
    factionId: integer().primaryKey().notNull(),
    factionName: text({ length: 100 }),
    description: text({ length: 2000 }),
    raceIds: integer(),
    solarSystemId: integer(),
    corporationId: integer(),
    sizeFactor: real(),
    stationCount: integer(),
    stationSystemCount: integer(),
    militiaCorporationId: integer(),
    iconId: integer(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const eveGraphics = sqliteTable(
  "eveGraphics",
  {
    graphicId: integer().primaryKey().notNull(),
    sofFactionName: text({ length: 100 }),
    graphicFile: text({ length: 256 }),
    sofHullName: text({ length: 100 }),
    sofRaceName: text({ length: 100 }),
    description: text(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const invCategories = sqliteTable(
  "invCategories",
  {
    categoryId: integer().primaryKey().notNull(),
    categoryName: text({ length: 100 }),
    iconId: integer(),
    published: numeric(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const staStations = sqliteTable(
  "staStations",
  {
    stationId: integer().primaryKey().notNull(),
    security: real(),
    dockingCostPerVolume: real(),
    maxShipVolumeDockable: real(),
    officeRentalCost: integer(),
    operationId: integer(),
    stationTypeId: integer(),
    corporationId: integer(),
    solarSystemId: integer(),
    constellationId: integer(),
    regionId: integer(),
    stationName: text({ length: 100 }),
    x: real(),
    y: real(),
    z: real(),
    reprocessingEfficiency: real(),
    reprocessingStationsTake: real(),
    reprocessingHangarFlag: integer(),
  },
  (table) => [
    index("ix_staStations_constellationID").on(table.constellationId),
    index("ix_staStations_stationTypeID").on(table.stationTypeId),
    index("ix_staStations_operationID").on(table.operationId),
    index("ix_staStations_regionID").on(table.regionId),
    index("ix_staStations_solarSystemID").on(table.solarSystemId),
    index("ix_staStations_corporationID").on(table.corporationId),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const mapLocationWormholeClasses = sqliteTable(
  "mapLocationWormholeClasses",
  {
    locationId: integer().primaryKey().notNull(),
    wormholeClassId: integer(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const invItems = sqliteTable(
  "invItems",
  {
    itemId: integer().primaryKey().notNull(),
    typeId: integer().notNull(),
    ownerId: integer().notNull(),
    locationId: integer().notNull(),
    flagId: integer().notNull(),
    quantity: integer().notNull(),
  },
  (table) => [
    index("ix_invItems_locationID").on(table.locationId),
    index("items_IX_OwnerLocation").on(table.ownerId, table.locationId),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const mapUniverse = sqliteTable(
  "mapUniverse",
  {
    universeId: integer().primaryKey().notNull(),
    universeName: text({ length: 100 }),
    x: real(),
    y: real(),
    z: real(),
    xMin: real(),
    xMax: real(),
    yMin: real(),
    yMax: real(),
    zMin: real(),
    zMax: real(),
    radius: real(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const skinShip = sqliteTable(
  "skinShip",
  {
    skinId: integer(),
    typeId: integer(),
  },
  (table) => [
    index("ix_skinShip_typeID").on(table.typeId),
    index("ix_skinShip_skinID").on(table.skinId),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const crpNpcCorporationTrades = sqliteTable(
  "crpNPCCorporationTrades",
  {
    corporationId: integer().notNull(),
    typeId: integer().notNull(),
  },
  (table) => [
    primaryKey({
      columns: [table.corporationId, table.typeId],
      name: "crpNPCCorporationTrades_corporationID_typeID_pk",
    }),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const chrBloodlines = sqliteTable(
  "chrBloodlines",
  {
    bloodlineId: integer().primaryKey().notNull(),
    bloodlineName: text({ length: 100 }),
    raceId: integer(),
    description: text({ length: 1000 }),
    maleDescription: text({ length: 1000 }),
    femaleDescription: text({ length: 1000 }),
    shipTypeId: integer(),
    corporationId: integer(),
    perception: integer(),
    willpower: integer(),
    charisma: integer(),
    memory: integer(),
    intelligence: integer(),
    iconId: integer(),
    shortDescription: text({ length: 500 }),
    shortMaleDescription: text({ length: 500 }),
    shortFemaleDescription: text({ length: 500 }),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const warCombatZones = sqliteTable(
  "warCombatZones",
  {
    combatZoneId: integer().primaryKey().notNull(),
    combatZoneName: text({ length: 100 }),
    factionId: integer(),
    centerSystemId: integer(),
    description: text({ length: 500 }),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const invMetaGroups = sqliteTable(
  "invMetaGroups",
  {
    metaGroupId: integer().primaryKey().notNull(),
    metaGroupName: text({ length: 100 }),
    description: text({ length: 1000 }),
    iconId: integer(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const industryActivitySkills = sqliteTable(
  "industryActivitySkills",
  {
    typeId: integer(),
    activityId: integer(),
    skillId: integer(),
    level: integer(),
  },
  (table) => [
    index("industryActivitySkills_idx1").on(table.typeId, table.activityId),
    index("ix_industryActivitySkills_skillID").on(table.skillId),
    index("ix_industryActivitySkills_typeID").on(table.typeId),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const staOperationServices = sqliteTable(
  "staOperationServices",
  {
    operationId: integer().notNull(),
    serviceId: integer().notNull(),
  },
  (table) => [
    primaryKey({
      columns: [table.operationId, table.serviceId],
      name: "staOperationServices_operationID_serviceID_pk",
    }),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const dgmEffects = sqliteTable(
  "dgmEffects",
  {
    effectId: integer().primaryKey().notNull(),
    effectName: text({ length: 400 }),
    effectCategory: integer(),
    preExpression: integer(),
    postExpression: integer(),
    description: text({ length: 1000 }),
    guid: text({ length: 60 }),
    iconId: integer(),
    isOffensive: numeric(),
    isAssistance: numeric(),
    durationAttributeId: integer(),
    trackingSpeedAttributeId: integer(),
    dischargeAttributeId: integer(),
    rangeAttributeId: integer(),
    falloffAttributeId: integer(),
    disallowAutoRepeat: numeric(),
    published: numeric(),
    displayName: text({ length: 100 }),
    isWarpSafe: numeric(),
    rangeChance: numeric(),
    electronicChance: numeric(),
    propulsionChance: numeric(),
    distribution: integer(),
    sfxName: text({ length: 20 }),
    npcUsageChanceAttributeId: integer(),
    npcActivationChanceAttributeId: integer(),
    fittingUsageChanceAttributeId: integer(),
    modifierInfo: text(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const ramAssemblyLineTypeDetailPerCategory = sqliteTable(
  "ramAssemblyLineTypeDetailPerCategory",
  {
    assemblyLineTypeId: integer().notNull(),
    categoryId: integer().notNull(),
    timeMultiplier: real(),
    materialMultiplier: real(),
    costMultiplier: real(),
  },
  (table) => [
    primaryKey({
      columns: [table.assemblyLineTypeId, table.categoryId],
      name: "ramAssemblyLineTypeDetailPerCategory_assemblyLineTypeID_categoryID_pk",
    }),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const dgmExpressions = sqliteTable(
  "dgmExpressions",
  {
    expressionId: integer().primaryKey().notNull(),
    operandId: integer(),
    arg1: integer(),
    arg2: integer(),
    expressionValue: text({ length: 100 }),
    description: text({ length: 1000 }),
    expressionName: text({ length: 500 }),
    expressionTypeId: integer(),
    expressionGroupId: integer(),
    expressionAttributeId: integer(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const ramActivities = sqliteTable(
  "ramActivities",
  {
    activityId: integer().primaryKey().notNull(),
    activityName: text({ length: 100 }),
    iconNo: text({ length: 5 }),
    description: text({ length: 1000 }),
    published: numeric(),
  },
  (table) => [
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const agtAgents = sqliteTable(
  "agtAgents",
  {
    agentId: integer().primaryKey().notNull(),
    divisionId: integer(),
    corporationId: integer(),
    locationId: integer(),
    level: integer(),
    quality: integer(),
    agentTypeId: integer(),
    isLocator: numeric(),
  },
  (table) => [
    index("ix_agtAgents_locationID").on(table.locationId),
    index("ix_agtAgents_corporationID").on(table.corporationId),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);

export const invGroups = sqliteTable(
  "invGroups",
  {
    groupId: integer().primaryKey().notNull(),
    categoryId: integer(),
    groupName: text({ length: 100 }),
    iconId: integer(),
    useBasePrice: numeric(),
    anchored: numeric(),
    anchorable: numeric(),
    fittableNonSingleton: numeric(),
    published: numeric(),
  },
  (table) => [
    index("ix_invGroups_categoryID").on(table.categoryId),
    check("cnpcc_scatt", sql`scattered IN (0, 1`),
    check("invmarketgroups_hastypes", sql`"hasTypes" IN (0, 1`),
    check("mapss_border", sql`border IN (0, 1`),
    check("mapss_fringe", sql`fringe IN (0, 1`),
    check("mapss_corridor", sql`corridor IN (0, 1`),
    check("mapss_hub", sql`hub IN (0, 1`),
    check("mapss_internat", sql`international IN (0, 1`),
    check("mapss_regional", sql`regional IN (0, 1`),
    check("mapss_constel", sql`constellation IN (0, 1`),
    check("invtypereactions_input", sql`input IN (0, 1`),
    check("pstm_input", sql`"isInput" IN (0, 1`),
    check("invtype_published", sql`published IN (0, 1`),
    check("dat_pub", sql`published IN (0, 1`),
    check("dat_stack", sql`stackable IN (0, 1`),
    check("dat_hig", sql`"highIsGood" IN (0, 1`),
    check("mapcelestialstats_frag", sql`fragmented IN (0, 1`),
    check("mapcelestialstats_locked", sql`locked IN (0, 1`),
    check("mapCelestialGraphics_check_1", sql`population IN (0, 1`),
    check("stastat_conq", sql`conquerable IN (0, 1`),
    check("dte_default", sql`"isDefault" IN (0, 1`),
    check("invcat_published", sql`published IN (0, 1`),
    check("de_offense", sql`"isOffensive" IN (0, 1`),
    check("de_assist", sql`"isAssistance" IN (0, 1`),
    check("de_disallowar", sql`"disallowAutoRepeat" IN (0, 1`),
    check("de_published", sql`published IN (0, 1`),
    check("de_warpsafe", sql`"isWarpSafe" IN (0, 1`),
    check("de_rangechance", sql`"rangeChance" IN (0, 1`),
    check("de_elecchance", sql`"electronicChance" IN (0, 1`),
    check("de_propchance", sql`"propulsionChance" IN (0, 1`),
    check("ra_pub", sql`published IN (0, 1`),
    check("aa_isloc", sql`"isLocator" IN (0, 1`),
    check("invgroup_usebaseprice", sql`"useBasePrice" IN (0, 1`),
    check("invgroup_anchored", sql`anchored IN (0, 1`),
    check("invgroup_anchorable", sql`anchorable IN (0, 1`),
    check("invgroup_fitnonsingle", sql`"fittableNonSingleton" IN (0, 1`),
    check("invgroup_published", sql`published IN (0, 1`),
  ]
);
